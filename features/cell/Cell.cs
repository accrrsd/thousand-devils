using Godot;
using System;
using static UtilsSpace.UtilsFunctions;
namespace CellSpace;

public enum CellType
{
  Random,
  Empty,
  Arrow,
}

public interface ICell
{
  bool IsOpen { get; set; }
  CellType Type { get; }
}

public partial class Cell : Node3D, ICell
{
  private bool _isOpen = false;
  public bool IsOpen
  {
    get { return _isOpen; }
    set
    {
      _isOpen = value;
      ChangeMapsVisibility(value);
    }
  }
  [Export]
  private GridMap _visibleCellElem;
  [Export]
  private PackedScene _invisibleCellScene;
  // that elem will be generated by _invisibleCellScene, and then will be put as child
  private GridMap _invisibleCellElem;
  // random by default and can be changed inside editor, if it still random - forceful change.
  [Export]
  public CellType Type { get; private set; } = CellType.Random;


  public override void _Ready()
  {
    base._Ready();
    _invisibleCellElem = UnpackInvisibleScene();
    ChangeTypeWhenRandom();
    ChangeMapsVisibility(false);
    AddChild(_invisibleCellElem);
  }

  private void ChangeMapsVisibility(bool value)
  {
    if (value)
    {
      _visibleCellElem.Visible = true;
      _invisibleCellElem.Visible = false;
    }
    else
    {
      _visibleCellElem.Visible = false;
      _invisibleCellElem.Visible = true;
    }
  }

  private void ChangeTypeWhenRandom()
  {
    if (Type != CellType.Random) return;
    Type = GetRandomEnumValueExcluding(CellType.Random);
  }

  private GridMap UnpackInvisibleScene()
  {
    Node instance = _invisibleCellScene?.Instantiate();
    if (_invisibleCellScene == null || instance is not GridMap) return GD.Load<PackedScene>("res://cells/unknown_maps/Forest_1.tscn").Instantiate<GridMap>();
    return instance as GridMap;
  }
}